// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Thematique {
  ACTIVITE_ECONOMIQUE
  EAU
  ADAPTATION
  ENERGIE
  ECONOMIE_CIRCULAIRE
  MOBILITE
  NATURE
  URBANISME
  SENSIBILISATION
  AGRICULTURE
  CULTURE
  STRATEGIE
  SOLIDARITE
}

enum SousThematique {
  ACTIVITE_ECONOMIQUE_1
  ACTIVITE_ECONOMIQUE_2
  ACTIVITE_ECONOMIQUE_3
  ACTIVITE_ECONOMIQUE_4
  ACTIVITE_ECONOMIQUE_5
  ACTIVITE_ECONOMIQUE_6
  ACTIVITE_ECONOMIQUE_7
  ACTIVITE_ECONOMIQUE_8
  ACTIVITE_ECONOMIQUE_9
  ACTIVITE_ECONOMIQUE_10
  ACTIVITE_ECONOMIQUE_11
  ACTIVITE_ECONOMIQUE_12
  ACTIVITE_ECONOMIQUE_13
  ACTIVITE_ECONOMIQUE_14
  EAU_1
  EAU_2
  EAU_3
  EAU_4
  EAU_5
  EAU_6
  ADAPTATION_1
  ADAPTATION_2
  ADAPTATION_3
  ADAPTATION_4
  ADAPTATION_5
  ENERGIE_1
  ENERGIE_2
  ENERGIE_3
  ENERGIE_4
  ENERGIE_5
  ENERGIE_6
  ECONOMIE_CIRCULAIRE_1
  ECONOMIE_CIRCULAIRE_2
  ECONOMIE_CIRCULAIRE_3
  ECONOMIE_CIRCULAIRE_4
  ECONOMIE_CIRCULAIRE_5
  ECONOMIE_CIRCULAIRE_6
  MOBILITE_1
  MOBILITE_2
  MOBILITE_3
  MOBILITE_4
  MOBILITE_5
  MOBILITE_6
  MOBILITE_7
  MOBILITE_8
  MOBILITE_9
  MOBILITE_10
  NATURE_1
  NATURE_2
  NATURE_3
  NATURE_4
  NATURE_5
  NATURE_6
  NATURE_7
  NATURE_8
  NATURE_9
  NATURE_10
  URBANISME_1
  URBANISME_2
  URBANISME_3
  URBANISME_4
  URBANISME_5
  URBANISME_6
  URBANISME_7
  URBANISME_8
  URBANISME_9
  URBANISME_10
  URBANISME_11
  URBANISME_12
  URBANISME_13
  URBANISME_14
  SENSIBILISATION_1
  SENSIBILISATION_2
  SENSIBILISATION_3
  SENSIBILISATION_4
  SENSIBILISATION_5
  AGRICULTURE_1
  AGRICULTURE_2
  AGRICULTURE_3
  AGRICULTURE_4
  AGRICULTURE_5
  AGRICULTURE_6
  CULTURE_1
  CULTURE_2
  CULTURE_3
  CULTURE_4
  CULTURE_5
  CULTURE_6
  CULTURE_7
  CULTURE_8
  STRATEGIE_1
  STRATEGIE_2
  STRATEGIE_3
  STRATEGIE_4
  STRATEGIE_5
  STRATEGIE_6
  STRATEGIE_7
  STRATEGIE_8
  STRATEGIE_9
  SOLIDARITE_1
  SOLIDARITE_2
  SOLIDARITE_3
  SOLIDARITE_4
  SOLIDARITE_5
  SOLIDARITE_6
  SOLIDARITE_7
  SOLIDARITE_8
  SOLIDARITE_9
  SOLIDARITE_10
  SOLIDARITE_11
  SOLIDARITE_12
  SOLIDARITE_13
  SOLIDARITE_14
  SOLIDARITE_15
}

enum Status {
  IDEE
  FAISABILITE
  A_VENIR
  EN_COURS
  EN_PAUSE
  ABANDONNE
  TERMINE
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                   String         @id @default(cuid())
  lastname             String?
  firstname            String?
  email                String?        @unique
  password             String?
  emailVerified        DateTime?
  image                String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  agentconnect_info    Json?
  Account              Account[]
  projects             user_project[] @relation(name: "project_access")
  user_project_deleted user_project[] @relation(name: "user_project_deleter")
  projects_created     Project[]
}

model Project {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now())
  name            String
  description     String
  ownerUserId     String
  owner           User             @relation(fields: [ownerUserId], references: [id])
  status          Status
  thematiques     Thematique[]
  sousThematiques SousThematique[]
  user_projects   user_project[]
  collectivite    Collectivite?    @relation(fields: [collectiviteId], references: [id])
  collectiviteId  String?
}

enum RoleProject {
  ADMIN
}

model user_project {
  id         Int         @id @default(autoincrement())
  role       RoleProject
  project_id String
  project    Project     @relation(fields: [project_id], references: [id])
  user_id    String
  user       User        @relation(name: "project_access", fields: [user_id], references: [id])
  created_at DateTime    @default(now())
  deleted_at DateTime?
  deleted_by String?
  deleter    User?       @relation(name: "user_project_deleter", fields: [deleted_by], references: [id])

  @@unique([user_id, project_id])
}

model Service {
  id              String           @id @default(cuid())
  name            String
  slug            String
  logo            String
  description     String
  projectUrl      String?
  newProjectUrl   String
  projectLabel    String?
  newProjectLabel String?
  contexts        ServiceContext[]
}

model ServiceContext {
  id              String           @id @default(cuid())
  serviceId       String
  service         Service          @relation(fields: [serviceId], references: [id])
  description     String?
  newProjectUrl   String?
  thematiques     Thematique[]
  sousThematiques SousThematique[]
  statuses        Status[]
  projectLabel    String?
  newProjectLabel String?
}

model Collectivite {
  id           String    @id @default(cuid())
  name         String
  code_insee   String?   @unique
  code_postal  String?
  adresse_info Json?
  ban_id       String?   @unique
  latitude     Float?
  longitude    Float?
  projects     Project[]
}
