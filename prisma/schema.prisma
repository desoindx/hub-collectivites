// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Thematique {
  CULTURE
  EAU
  ENERGIE
  MOBILITE
}

enum SousThematique {
  // CULTURE
  ART_PLASTIQUES
  MEDIAS
  MUSEE
  // EAU
  ASSAINISSEMENT
  PLUVIALE
  POTABLE
  // ENERGIE
  ECONOMIE
  RECYCLAGE
  DISTRIBUTION
  // MOBILITE
  CONNAISSANCE
  INFORMATION
  URBAINE
}

enum Status {
  QUESTIONNEMENT
  PRIORISATION
  REDACTION
  LANCEMENT
  EVALUATION
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                   String         @id @default(cuid())
  lastname             String?
  firstname            String?
  email                String?        @unique
  password             String?
  emailVerified        DateTime?
  image                String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  agentconnect_info    Json?
  Account              Account[]
  projects             user_project[] @relation(name: "project_access")
  user_project_deleted user_project[] @relation(name: "user_project_deleter")
  projects_created     Project[]
}

model Project {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now())
  name            String
  description     String
  ownerUserId     String
  owner           User             @relation(fields: [ownerUserId], references: [id])
  status          Status
  thematiques     Thematique[]
  sousThematiques SousThematique[]
  user_projects   user_project[]
}

enum RoleProject {
  ADMIN
}

model user_project {
  id         Int         @id @default(autoincrement())
  role       RoleProject
  project_id String
  project    Project     @relation(fields: [project_id], references: [id])
  user_id    String?
  user       User?       @relation(name: "project_access", fields: [user_id], references: [id])
  created_at DateTime    @default(now())
  deleted_at DateTime?
  deleted_by String?
  deleter    User?       @relation(name: "user_project_deleter", fields: [deleted_by], references: [id])

  @@unique([user_id, project_id])
}

model Service {
  id            String           @id @default(cuid())
  name          String
  slug          String
  logo          String
  description   String
  projectUrl    String
  newProjectUrl String
  contexts      ServiceContext[]
}

model ServiceContext {
  id            String       @id @default(cuid())
  serviceId     String
  service       Service      @relation(fields: [serviceId], references: [id])
  description   String?
  newProjectUrl String?
  thematiques   Thematique[]
}
